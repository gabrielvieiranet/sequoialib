"""
Exemplo de configura√ß√£o otimizada do Spark
Demonstra como usar a nova estrat√©gia de configura√ß√£o via SparkConf
"""

from sequoia import GlueClient


def demonstrate_optimized_config():
    """
    Demonstra a nova estrat√©gia de configura√ß√£o otimizada
    """
    print("=== Demonstra√ß√£o de Configura√ß√£o Otimizada ===\n")

    # Exemplo 1: Inicializa√ß√£o com configura√ß√µes padr√£o
    print("1. Inicializa√ß√£o com configura√ß√µes padr√£o:")
    try:
        client = GlueClient()
        print("   ‚úÖ GlueClient inicializado com configura√ß√µes otimizadas")
        print("   üìã KryoSerializer, Parquet e performance otimizados")
    except Exception as e:
        print(f"   ‚ùå Erro na inicializa√ß√£o: {str(e)}")
    print()

    # Exemplo 2: Inicializa√ß√£o com configura√ß√µes customizadas
    print("2. Inicializa√ß√£o com configura√ß√µes customizadas:")
    try:
        custom_config = {
            "spark.sql.adaptive.enabled": "true",
            "spark.sql.adaptive.coalescePartitions.enabled": "true",
            "spark.sql.adaptive.skewJoin.enabled": "true",
            "spark.sql.adaptive.localShuffleReader.enabled": "true",
        }

        client_custom = GlueClient(spark_config=custom_config)
        print("   ‚úÖ GlueClient inicializado com configs customizadas")
        print("   üìã Configura√ß√µes adaptativas habilitadas")
    except Exception as e:
        print(f"   ‚ùå Erro na inicializa√ß√£o: {str(e)}")
    print()

    # Exemplo 3: Verificar configura√ß√µes aplicadas
    print("3. Verificar configura√ß√µes aplicadas:")
    try:
        current_config = client.get_current_config()
        important_keys = [
            "spark.serializer",
            "spark.sql.parquet.compression.codec",
            "spark.sql.adaptive.enabled",
            "spark.kryo.registrationRequired",
        ]

        for key in important_keys:
            if key in current_config:
                print(f"   {key}: {current_config[key]}")
            else:
                print(f"   {key}: N√£o configurado")
    except Exception as e:
        print(f"   ‚ùå Erro ao verificar configs: {str(e)}")
    print()

    # Exemplo 4: Compara√ß√£o de performance
    print("4. Compara√ß√£o de performance:")
    print("   - Configura√ß√£o via SparkConf: Aplicada na inicializa√ß√£o")
    print("   - Configura√ß√£o via SparkSession: Pode falhar se j√° inicializado")
    print(
        "   - Nova estrat√©gia: Sempre funciona, sem erros CANNOT_MODIFY_CONFIG"
    )
    print()

    # Exemplo 5: Tratamento de ambiente
    print("5. Tratamento de ambiente:")
    print("   - AWS Glue: GlueContext criado normalmente")
    print("   - Ambiente local: Fallback para SparkSession")
    print("   - Funciona em ambos os ambientes")
    print()


def demonstrate_config_strategy():
    """
    Demonstra a estrat√©gia de configura√ß√£o
    """
    print("=== Estrat√©gia de Configura√ß√£o ===\n")

    print("1. Configura√ß√µes Padr√£o Unificadas:")
    print("   üìã KryoSerializer:")
    print("      - spark.serializer: KryoSerializer")
    print("      - spark.kryo.registrationRequired: false")
    print("      - spark.kryoserializer.buffer.max: 2047m")
    print()
    print("   üìã Parquet Otimizado:")
    print("      - spark.sql.parquet.compression.codec: snappy")
    print("      - spark.sql.parquet.filterPushdown: true")
    print("      - spark.sql.parquet.block.size: 128MB")
    print()
    print("   üìã Performance:")
    print("      - spark.sql.adaptive.enabled: true")
    print("      - spark.sql.adaptive.coalescePartitions.enabled: true")
    print("      - spark.sql.adaptive.skewJoin.enabled: true")
    print()

    print("2. Vantagens da Nova Estrat√©gia:")
    print("   ‚úÖ Configura√ß√µes aplicadas na inicializa√ß√£o")
    print("   ‚úÖ Sem erros CANNOT_MODIFY_CONFIG")
    print("   ‚úÖ Configura√ß√µes unificadas em um local")
    print("   ‚úÖ Fallback para SparkContext padr√£o se falhar")
    print("   ‚úÖ Configura√ß√µes customizadas suportadas")
    print()


def demonstrate_usage_patterns():
    """
    Demonstra padr√µes de uso da nova configura√ß√£o
    """
    print("=== Padr√µes de Uso ===\n")

    print("1. Uso B√°sico (Recomendado):")
    print("   ```python")
    print("   # Configura√ß√µes otimizadas aplicadas automaticamente")
    print("   client = GlueClient()")
    print("   df = client.read_table('database', 'table')")
    print("   ```")
    print()

    print("2. Uso com Configura√ß√µes Customizadas:")
    print("   ```python")
    print("   custom_config = {")
    print("       'spark.sql.adaptive.enabled': 'true',")
    print("       'spark.sql.adaptive.coalescePartitions.enabled': 'true',")
    print("   }")
    print("   client = GlueClient(spark_config=custom_config)")
    print("   ```")
    print()

    print("3. Uso com Contextos Existentes:")
    print("   ```python")
    print("   # Se voc√™ j√° tem contextos configurados")
    print("   client = GlueClient(")
    print("       spark_context=existing_spark_context,")
    print("       glue_context=existing_glue_context")
    print("   )")
    print("   ```")
    print()


if __name__ == "__main__":
    # Executar demonstra√ß√µes
    demonstrate_optimized_config()
    demonstrate_config_strategy()
    demonstrate_usage_patterns()

    print("=== Demonstra√ß√£o Conclu√≠da ===")
    print(
        "\nüí° Dica: Use GlueClient() sem par√¢metros para configura√ß√µes otimizadas!"
    )
    print(
        "   As configura√ß√µes s√£o aplicadas automaticamente na inicializa√ß√£o."
    )
