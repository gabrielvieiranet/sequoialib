"""
Exemplo de tratamento de erros de configura√ß√£o do Spark
Demonstra como lidar com erros de configura√ß√£o quando o Spark j√° foi inicializado
"""

from sequoia import GlueClient


def demonstrate_config_error_handling():
    """
    Demonstra como lidar com erros de configura√ß√£o do Spark
    """
    print("=== Demonstra√ß√£o de Tratamento de Erros de Configura√ß√£o ===\n")

    # Exemplo 1: Inicializa√ß√£o normal
    print("1. Inicializa√ß√£o normal do GlueClient:")
    try:
        client = GlueClient()
        print("   ‚úÖ GlueClient inicializado com sucesso")
        print("   üìã Configura√ß√µes aplicadas automaticamente")
    except Exception as e:
        print(f"   ‚ùå Erro na inicializa√ß√£o: {str(e)}")
    print()

    # Exemplo 2: Tentativa de atualizar configura√ß√µes
    print("2. Tentativa de atualizar configura√ß√µes:")
    try:
        # Configura√ß√µes que podem causar erro se Spark j√° inicializado
        config_to_update = {
            "spark.serializer": "org.apache.spark.serializer.KryoSerializer",
            "spark.sql.parquet.compression.codec": "snappy",
            "spark.sql.adaptive.enabled": "true",
        }

        client.update_config(config_to_update)
        print("   ‚úÖ Configura√ß√µes atualizadas com sucesso")
    except Exception as e:
        print(f"   ‚ö†Ô∏è  Aviso: {str(e)}")
        print("   üí° O c√≥digo continua funcionando normalmente")
    print()

    # Exemplo 3: Verificar configura√ß√µes atuais
    print("3. Verificar configura√ß√µes atuais:")
    try:
        current_config = client.get_current_config()
        important_keys = [
            "spark.serializer",
            "spark.sql.parquet.compression.codec",
            "spark.sql.adaptive.enabled",
        ]

        for key in important_keys:
            if key in current_config:
                print(f"   {key}: {current_config[key]}")
            else:
                print(f"   {key}: N√£o configurado")
    except Exception as e:
        print(f"   ‚ùå Erro ao obter configura√ß√µes: {str(e)}")
    print()

    # Exemplo 4: Uso normal ap√≥s erro de configura√ß√£o
    print("4. Uso normal ap√≥s erro de configura√ß√£o:")
    try:
        # Tentar ler uma tabela (deve funcionar mesmo com erro de config)
        print("   Tentando ler tabela...")
        # df = client.read_table("database", "table")  # Comentado para exemplo
        print("   ‚úÖ Funcionalidade normal n√£o afetada")
    except Exception as e:
        print(f"   ‚ùå Erro na leitura: {str(e)}")
    print()


def demonstrate_robust_initialization():
    """
    Demonstra inicializa√ß√£o robusta que n√£o falha com erros de config
    """
    print("=== Demonstra√ß√£o de Inicializa√ß√£o Robusta ===\n")

    # Exemplo 1: Inicializa√ß√£o com tratamento de erro
    print("1. Inicializa√ß√£o com tratamento de erro:")
    try:
        # Criar cliente - n√£o deve falhar mesmo com erro de config
        client = GlueClient()
        print("   ‚úÖ GlueClient criado com sucesso")

        # Verificar se est√° funcional
        print("   üîç Verificando funcionalidade...")
        # Teste simples de funcionalidade
        spark_session = client.spark_session
        print(f"   ‚úÖ SparkSession dispon√≠vel: {spark_session is not None}")

    except Exception as e:
        print(f"   ‚ùå Erro cr√≠tico na inicializa√ß√£o: {str(e)}")
    print()

    # Exemplo 2: Explica√ß√£o do erro
    print("2. Explica√ß√£o do erro CANNOT_MODIFY_CONFIG:")
    print("   üìã O erro ocorre quando:")
    print("      - Spark j√° foi inicializado")
    print("      - Tentativa de modificar spark.serializer")
    print("      - Configura√ß√£o j√° foi definida")
    print()
    print("   üí° Solu√ß√£o implementada:")
    print("      - Verifica√ß√£o se config j√° aplicada")
    print("      - Tratamento de erro sem falha")
    print("      - Continuidade da execu√ß√£o")
    print()


def demonstrate_best_practices():
    """
    Demonstra melhores pr√°ticas para evitar erros de configura√ß√£o
    """
    print("=== Melhores Pr√°ticas ===\n")

    print("1. Inicializa√ß√£o correta:")
    print("   ‚úÖ Use GlueClient() sem par√¢metros")
    print("   ‚úÖ Deixe o c√≥digo aplicar configs automaticamente")
    print("   ‚ùå N√£o tente modificar spark.serializer manualmente")
    print()

    print("2. Tratamento de erros:")
    print("   ‚úÖ O c√≥digo trata erros automaticamente")
    print("   ‚úÖ Funcionalidade continua mesmo com erro de config")
    print("   ‚úÖ Logs informam sobre problemas de configura√ß√£o")
    print()

    print("3. Verifica√ß√£o de funcionalidade:")
    print("   ‚úÖ Sempre teste se o cliente est√° funcionando")
    print("   ‚úÖ Use get_current_config() para verificar configs")
    print("   ‚úÖ Monitore logs para problemas de configura√ß√£o")
    print()


if __name__ == "__main__":
    # Executar demonstra√ß√µes
    demonstrate_config_error_handling()
    demonstrate_robust_initialization()
    demonstrate_best_practices()

    print("=== Demonstra√ß√£o Conclu√≠da ===")
    print(
        "\nüí° Dica: O GlueClient √© robusto e continua funcionando mesmo com erros de config!"
    )
    print(
        "   Os erros s√£o tratados automaticamente e n√£o afetam a funcionalidade principal."
    )
